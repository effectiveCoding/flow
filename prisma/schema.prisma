// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  spaces        Space[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime


  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Space {
  id          String  @id @default(cuid())
  name        String
  description String?
  post        Post    @relation(fields: [postId], references: [id])
  postId      String  @unique
  owner       User    @relation(fields: [ownerId], references: [id])
  ownerId     String

  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt

  @@map("spaces")
}

model Post {
  id            String         @id @default(cuid())
  announcements Announcement[]
  space         Space?

  @@map("posts")
}

model Announcement {
  id      String  @id @default(cuid())
  //TODO: change content to JSON on postgres to use tiptap
  content String
  Post    Post?   @relation(fields: [postId], references: [id])
  postId  String?

  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt

  @@map("announcements")
}
