// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  student
  instructor
}

model User {
  id             String      @id @default(cuid())
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  handledClasses Classroom[] @relation("handledClasses")
  classes        Classroom[] @relation("classes", references: [id])
  posts          Post[]
  instructor     Boolean     @default(false)

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime


  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Classroom {
  id          String   @id @default(cuid())
  name        String
  description String?
  owner       User     @relation(name: "handledClasses", fields: [ownerId], references: [id])
  ownerId     String
  members     User[]   @relation(name: "classes", references: [id])
  posts       Post[]
  dateCreated DateTime @default(now())
  dateUpdated DateTime @updatedAt

  @@map("rooms")
}

model Post {
  id          String     @id @default(cuid())
  content     Json
  room        Classroom? @relation(fields: [roomId], references: [id])
  roomId      String?
  publisher   User       @relation(fields: [publisherId], references: [id])
  publisherId String
  dateCreated DateTime   @default(now())
  dateUpdated DateTime   @updatedAt

  @@map("posts")
}
